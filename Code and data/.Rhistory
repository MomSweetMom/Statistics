str(Budget)
dim(Budget)
#rownames(Budget) = Budget$AN
row.names(Budget)
Budget[,-1]
# Remove missing observations if any
Budget = na.omit(Budget)
# Check the variables names
names(Budget)
par(mfrow=c(1,1))
boxplot(Budget[,-1])
# Attach the observations Frame
attach(Budget)
library(c('magrittr','reshaped2', 'ggplot2', 'devtools',
'Rcpp', 'rCharts', 'dplyr', 'tidyr'))
Budget <- read.csv("Budget.txt", header=FALSE, stringsAsFactors=FALSE)
colnames(Budget) = c("AN", "PVP", "AGR", "CMI", "TRA", "LOG",
"EDU", "ACS", "ANC", "DEF", "DET", "DIV")
Budget
dim(Budget)
#rownames(Budget) = Budget$AN
# Examine the structure of the data set.
str(Budget)
dim(Budget)
#rownames(Budget) = Budget$AN
row.names(Budget)
Budget[,-1]
# Remove missing observations if any
Budget = na.omit(Budget)
# Check the variables names
names(Budget)
par(mfrow=c(1,1))
boxplot(Budget[,-1])
# Attach the observations Frame
attach(Budget)
str(Budget)
summary(Budget)
boxplot(Budget[,-1])
boxplot(Budget[,-1], names = c('Percentage of France Budget',
'Budget Category'))
boxplot(Budget[,-1], labels = c('Percentage of France Budget',
'Budget Category'))
boxplot(Budget[,-1], ylab = 'Percentage of France Budget',            xlab = 'Budget Category'))
par(mfrow=c(3,4),family ='sans')
for (i in 2:length(names(Budget))){
hist((Budget)[,i],main=names(Budget)[i],prob=TRUE,xlab='% of the total Budget')
lines(density(Budget[,i]), col="red")
}
cormat<-round(cor(Budget),2)
cormat<-melt(cormat)
ggplot(data=data.frame(cormat),
aes(fill=value,x=X1, y=X2)) +
geom_tile(color="white") +
scale_fill_gradient2(low = "blue",
high = "blue",
mid = "orange",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation")
cormat<-round(cor(Budget[,-1]),2)
# Convert an object into a molten dataframe
cormat<-melt(cormat)
# data(attitude)
# library(ggplot2)
# library(reshape2)
# qplot(x='Budget Allocation', y='Budget Allocation', data=melt(cor()), fill=value, geom="tile")
ggplot(data=data.frame(cormat),
aes(fill=value,x=X1, y=X2)) +
geom_tile(color="white") +
scale_fill_gradient2(low = "blue",
high = "blue",
mid = "orange",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation")
cormat<-round(cor(Budget[,-1]),2)
# Convert an object into a molten dataframe
# cormat<-melt(cormat)
data(attitude)
library(ggplot2)
library(reshape2)
qplot(x='Budget Allocation', y='Budget Allocation', data=melt(cor(cormat)), fill=value, geom="tile")
# ggplot(data=data.frame(cormat),
#        aes(fill=value, x=X1, y=X2)) +
#        geom_tile(color="white") +
#        scale_fill_gradient2(low = "blue",
#                             high = "blue",
#                             mid = "orange",
#                             midpoint = 0,
#                             limit = c(-1,1),
#                             space = "Lab",
#                             name="Pearson\nCorrelation")
data(attitude)
head(attitude)
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(attitude)), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(attitude)), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1])), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'Pearson')), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson')), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson')), fill=value, geom="tile", name="Pearson\nCorrelation")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson')), fill="Pearson\nCorrelation", geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson')), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson')), fill=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson',)), colour=value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson',)), fill=value, geom="tile")
scale_fill_gradient2(low = "blue",
high = "blue",
mid = "orange",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson',)), fill=-value, geom="tile")
data(attitude)
head(attitude)
head(Budget[,-1])
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(Budget[,-1], method = 'pearson')), fill=-value, geom="tile")
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb)
}
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = names(Budget[,i]))
}
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = colnames(Budget[,i]))
}
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = colnames(Budget[,i]))
}
colnames(Budget)
colnames(Budget[,1])
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = colnames(Budget[i]))
}
c(colnames(Budget[,1]),'budget %')
o = c(colnames(Budget[,1]),'budget %')
o
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = colnames(Budget[i]), ylim = Budget[,1])
}
for (i in 2:(ncol(Budget[-1]))) {
tb = ts(Budget[,i])
plot(tb, colnames(Budget[,1]), ylim = Budget[,1])
}
plot(tb, colnames(Budget[,1]))
for (i in 2:(ncol(Budget[-1]))) {
tb = ts(Budget[,i])
plot(tb, colnames(Budget[,1]))
}
for (i in 2:(ncol(Budget[-1]))) {
tb = ts(Budget[,i])
plot(tb, colnames(Budget[,i]))
}
Budget[,1]
plot(tb, colnames(Budget[i]), ylim = c(1872, 1971))
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget[-1]))) {
tb = ts(Budget[,i])
plot(tb, colnames(Budget[i]), ylim = c(1872, 1971))
}
Budget[,2]
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = colnames(Budget[i]))
}
B = Budget[,-1]
par(mfrow = c(3,4))
for (i in 2:(ncol(B))) {
tb = ts(B[,i])
plot(tb, ylab = colnames(Budget[i]))
}
head(Budget)
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(B[,i])
plot(tb, ylab = colnames(Budget[i]))
}
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(B[,i])
plot(tb, ylab = colnames(Budget[i]))
}
par(mfrow = c(3,4))
for (i in 2:(ncol(Budget))) {
tb = ts(Budget[,i])
plot(tb, ylab = colnames(Budget[i]))
}
library(factominR)
P = princomp(Budget[,-1], cor=T)
Lambda_r<-(P$sdev)^2/sum((P$sdev)^2)
plot(Lambda_r, col='green')
lines(Lambda_r, col='pink')
Lambda_r<-cumsum(Lambda_r)
plot(Lambda_r)
lines(Lambda_r,col='pink')
abline(h = 0.9,col='black')
abline(h = 0.8,col='red')
library(factominR)
P = princomp(Budget[,-1], cor=T)
Lambda_r<-(P$sdev)^2/sum((P$sdev)^2)
plot(Lambda_r, col='green')
lines(Lambda_r, col='pink')
Lambda_r<-cumsum(Lambda_r)
plot(Lambda_r)
lines(Lambda_r,col='pink')
abline(h = 0.9,col='black')
abline(h = 0.8,col='red')
message("3 values have been replaced")
library(factominR)
budget = PCA(Budget[,-1])
summary(budget)
screeplot(budget2,type='lines',col=3)
summary(PCA)
library(FactoMineR)
budget = PCA(Budget[,-1])
summary(budget)
screeplot(budget2,type='lines',col=3)
summary(PCA)
library(FactoMineR)
budget = PCA(Budget[,-1])
summary(budget)
# screeplot(budget,type='lines',col=3)
summary(PCA)
library(FactoMineR)
budget = PCA(Budget[,-1], ncp = 2)
summary(budget)
# screeplot(budget,type='lines',col=3)
# summary(PCA)
library(FactoMineR)
summary(PCA(Budget[,-1], ncp = 2, graph = FALSE))
# screeplot(budget,type='lines',col=3)
# summary(PCA)
summary(PCA)
budget = PCA(Budget[,-1])
names(budget)
budget[[4]]
budget[[1]]
budget[[2]]
budget[[3]]
names(budget)
budget[[5]]
screeplot(budget,type='lines',col=3)
names(budget)
budget[[2]]
summary(budget)
plot(budget)
names(budget)
budget[[1]]
plot(budget[[1]])
plot(budget[[1]], type ='l')
plot(budget[[1]], type = 'l')
plot(budget[[1]]$`percentage of variance`, type = 'l')
plot(x = budget[[1]]$`percentage of variance`, type = 'l')
plot(y = budget[[1]]$`percentage of variance`, type = 'l')
plot(budget[[1]]$`cumulative percentage of variance`, type = 'l')
plot(budget[[1]]$`cumulative percentage of variance`, type = 'l',
ylab = 'Variances')
plot(budget[[1]]$`cumulative percentage of variance`, type = 'l',
ylab = 'Variances', xlab = "Number of Components")
plot(budget[[1]]$`cumulative percentage of variance`, type = 's',
ylab = 'Variances', xlab = "Number of Components")
plot(budget[[1]]$`cumulative percentage of variance`, type = 'b',
ylab = 'Variances', xlab = "Number of Components")
dimdesc(budget)
plot(budget, choix='var', title='var PCA graph', axes=c(1:2))
plot(budget, choix='ind', title='ind PCA graph', axes=c(1:2))
dimdesc(budget)
plot(budget, choix='var', title='var PCA graph', axes=c(1:2))
budget$var
dimdesc(budget)
dimdesc(budget)
dimdesc(budget, axes = 1:2)
km=kmeans(Budget[,-1],3,nstart=50)
Budget[,-1]
class(km$cluster)
plot(Budget[,1],km$cluster)
names(km)
plot(Budget[,-1], col=(km$cluster+1),
main="K-Means Clustering Results with K=3",
pch=20, cex=2)
km[[1]]
colnames(cluster, rownames(Budget))
cluster=km[[1]]
colnames(cluster, rownames(Budget))
rownames(Budget)
Budget[,1]
colnames(cluster, Budget[,1])
colnames(cluster)
colnames(cluster) = Budget[,1])
colnames(cluster) = Budget[,1]
Budget[,1]
rbind(Budget[,1], cluster)
cbind(Budget[,1], cluster)
plot(cbind(Budget[,1], cluster))
plot(Budget[,-1], col=(km$cluster+1),
main="K-Means Clustering Results with K=3",
pch=20, cex=2)
plot(Budget[,-1], col=(km$cluster+1),
main="K-Means Clustering Results with K=3",
pch=20, cex=2)
class(km$cluster)
plot(Budget[,1],km$cluster)
par(mfrow = c(1,1))
class(km$cluster)
plot(Budget[,1],km$cluster)
plot(cbind(Budget[,1], cluster))
plot(cbind(Budget[,1], cluster))
par(mfrow = c(1,1))
names(km)
plot(Budget[,-1], col=(km$cluster+1),
main="K-Means Clustering Results with K=3",
pch=20, cex=2)
plot(Budget[,1],km$cluster)
par(mfrow = c(1,1))
plot(Budget[,1],km$cluster)
plot(Budget[,-1], col=(km$cluster+1),
main="K-Means Clustering Results with K=3",
pch=20, cex=2)
names(km)
km=kmeans(Budget[,-1],2,nstart=50)
km2=kmeans(Budget[,-1],2,nstart=50)
plot(Budget[,1],km2$cluster)
km2[[9]]
km2[[7]]
km2[[1]]
km4=kmeans(Budget[,-1],4,nstart=50)
plot(Budget[,1],km4$cluster)
km5=kmeans(Budget[,-1],4,nstart=50)
km4=kmeans(Budget[,-1],4,nstart=50)
km3=kmeans(Budget[,-1],3,nstart=50)
km2=kmeans(Budget[,-1],2,nstart=50)
par(mfrow = c(2,2))
plot(Budget[,1], km2$cluster, xlab = 'Year', ylab = 'Clusters')
plot(Budget[,1], km3$cluster, xlab = 'Year', ylab = 'Clusters')
plot(Budget[,1], km4$cluster, xlab = 'Year', ylab = 'Clusters')
plot(Budget[,1], km5$cluster, xlab = 'Year', ylab = 'Clusters')
par(mfrow = c(2,2))
plot(Budget[,1], km2$cluster, xlab = 'Year', ylab = '2 Clusters')
plot(Budget[,1], km3$cluster, xlab = 'Year', ylab = '3 Clusters')
plot(Budget[,1], km4$cluster, xlab = 'Year', ylab = '4 Clusters')
plot(Budget[,1], km5$cluster, xlab = 'Year', ylab = '5 Clusters')
# Create a matrix with sd of each variables
N<-matrix(rep(apply(Budget[,-1],2,sd),24), nrow=24)
head(N)
# Adjusted for sd with 1/n
N<- (24-1)/23*(1/N)
# Create a matrix with mean of each variables
M<-matrix(rep(apply(Budget[,-1],2,mean),24),nrow=24)
# Centered data
Mprime<-Budget[,-1]-M
# Normalized
M_n<-Mprime*N
# Hierarchical ascending clustering
my_H_clust<-hclust(dist(M_n), method ="ward.D2")
my_H_clust1 = hclust(dist(M_n), method='complete')
# Create a matrix with sd of each variables
N<-matrix(rep(apply(Budget[,-1],2,sd),24), nrow=24)
head(N)
# Adjusted for sd with 1/n
N<- (24-1)/23*(1/N)
# Create a matrix with mean of each variables
M<-matrix(rep(apply(Budget[,-1],2,mean),24),nrow=24)
# Centered data
Mprime<-Budget[,-1]-M
# Normalized
M_n<-Mprime*N
# Hierarchical ascending clustering
my_H_clust<-hclust(dist(M_n), method ="ward.D2")
my_H_clust1 = hclust(dist(M_n), method='complete')
# Plot data
par(mfrow=c(1,1))
plot(my_H_clust)
plot(my_H_clust1)
# Plot data
my_H_clust
par(mfrow=c(1,1))
plot(my_H_clust)
plot(my_H_clust1)
# Plot data
my_H_clust
par(mfrow=c(1,1))
plot(my_H_clust, labels = Budgets[,1])
plot(my_H_clust1)
# Plot data
my_H_clust
par(mfrow=c(1,1))
plot(my_H_clust, labels = Budget[,1])
plot(my_H_clust1)
# Plot data
my_H_clust
par(mfrow=c(1,1))
plot(my_H_clust, labels = Budget[,1])
plot(my_H_clust1, labels = Budget[,1])
**2 component solution**
plot(budget, choix='ind', title='ind PCA graph', axes=c(1,3))
plot.PCA(budget, choix='ind', title='PCA graph: Individuals', axes=c(2,3))
plot.PCA(budget, choix='ind', title='PCA graph: Individuals', axes=c(2,3))
plot.PCA(budget, choix='ind', title='PCA graph: Individuals', axes=c(2,3))
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(2,3), drop = TRUE)
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3), drop = TRUE)
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3), drop = TRUE)
warnings()
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3),warnings()
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3), warnings()
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3), warnings()
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3), warnings()
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3), warnings()
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3))
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,2))
plot(budget, choix='ind', title='PCA graph: Individuals', axes=c(1,3))
getwd()
setwd(getwd())
getwd()
A1=read.table('data1.txt')
A2=read.table('data2.txt')
require(c('magrittr','reshaped2', 'ggplot2', 'devtools',
'Rcpp', 'dplyr', 'tidyr'))
library(reshape2)
library(magrittr)  # Package for pipeline %>%
library(ggplot2)
library(devtools)
library(Rcpp)
library(FactoMineR)
# library(rCharts)
# family="sans-serif"
A2=read.table('data2.txt',sep='\n')
A3=read.table('data3.txt')
A4=read.table('data4.txt')
A5=read.table('data5.txt')
A5[,1]
pie(table(A1))
title('circular diagram')   #to add a title to the graphic
